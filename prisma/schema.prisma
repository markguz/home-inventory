// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String // Hashed password - never store plain text
  name          String?
  role          String    @default("USER") // USER or ADMIN
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  items    Item[]
  sessions Session[]
  accounts Account[]

  @@index([email])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  minQuantity Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]
}

model Location {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  parentId    String?
  parent      Location?  @relation("LocationHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Location[] @relation("LocationHierarchy")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items       Item[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  itemTags  ItemTag[]
}

model Item {
  id            String    @id @default(cuid())
  name          String
  description   String?
  quantity      Int       @default(1)
  minQuantity   Int?
  purchaseDate  DateTime?
  purchasePrice Float?
  currentValue  Float?
  condition     String?   @default("good")
  notes         String?
  imageUrl      String?
  barcode       String?
  serialNumber  String?
  warrantyUntil DateTime?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  locationId    String
  location      Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  tags          ItemTag[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([locationId])
  @@index([name])
}

model ItemTag {
  id        String   @id @default(cuid())
  itemId    String
  tagId     String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([itemId, tagId])
  @@index([itemId])
  @@index([tagId])
}
